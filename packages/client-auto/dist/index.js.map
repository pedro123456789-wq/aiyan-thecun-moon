{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Client, IAgentRuntime } from \"@ai16z/eliza\";\nimport { TrustScoreManager } from \"@ai16z/plugin-solana\";\nimport { TokenProvider } from \"@ai16z/plugin-solana\";\nimport { WalletProvider } from \"@ai16z/plugin-solana\";\nimport { TrustScoreDatabase } from \"@ai16z/plugin-trustdb\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport class AutoClient {\n    interval: NodeJS.Timeout;\n    runtime: IAgentRuntime;\n    trustScoreProvider: TrustScoreManager;\n    walletProvider: WalletProvider;\n\n    constructor(runtime: IAgentRuntime) {\n        this.runtime = runtime;\n\n        const trustScoreDb = new TrustScoreDatabase(runtime.databaseAdapter.db);\n        this.trustScoreProvider = new TrustScoreManager(\n            runtime,\n            null,\n            trustScoreDb\n        );\n        this.walletProvider = new WalletProvider(\n            new Connection(runtime.getSetting(\"RPC_URL\")),\n            new PublicKey(runtime.getSetting(\"WALLET_PUBLIC_KEY\"))\n        );\n\n        // start a loop that runs every x seconds\n        this.interval = setInterval(\n            async () => {\n                await this.makeTrades();\n            },\n            60 * 60 * 1000\n        ); // 1 hour in milliseconds\n    }\n\n    async makeTrades() {\n        console.log(\"Running auto loop\");\n\n        // malibu todos\n        const startDate = new Date(new Date().getTime() - 60 * 60 * 1000);\n        const endDate = new Date();\n        // get recommendations from the last hour (or whatever time period we want) in order desc by trust score\n        const recommendations =\n            await this.trustScoreProvider.getRecommendations(\n                startDate,\n                endDate\n            );\n        // get high trust recommendations\n        const highTrustRecommendations = recommendations.filter(\n            (r) => r.averageTrustScore > 0.7\n        );\n\n        // get information for all tokens which were recommended\n        const tokenInfos = highTrustRecommendations.map(\n            async (highTrustRecommendation) => {\n                const tokenProvider = new TokenProvider(\n                    highTrustRecommendation.tokenAddress,\n                    this.walletProvider,\n                    this.runtime.cacheManager\n                );\n                const tokenInfo = await tokenProvider.getProcessedTokenData();\n                const shouldTrade = await tokenProvider.shouldTradeToken();\n                return { tokenInfo, shouldTrade };\n            }\n        );\n\n        // get any additional information we might need\n        // make sure we're looking at the right tokens and data\n\n        // shaw -- TODOs\n        // compose thesis context\n        // write a thesis which trades and why\n\n        // compose trade context\n        // geratate trades with LLM\n        // parse trades from LLM\n        // post thesis to twitter\n\n        // malibu todos\n        // execute trades\n    }\n}\n\nexport const AutoClientInterface: Client = {\n    start: async (runtime: IAgentRuntime) => {\n        const client = new AutoClient(runtime);\n        return client;\n    },\n    stop: async (runtime: IAgentRuntime) => {\n        console.warn(\"Direct client does not support stopping yet\");\n    },\n};\n\nexport default AutoClientInterface;\n"],"mappings":";AACA,SAAS,yBAAyB;AAClC,SAAS,qBAAqB;AAC9B,SAAS,sBAAsB;AAC/B,SAAS,0BAA0B;AACnC,SAAS,YAAY,iBAAiB;AAE/B,IAAM,aAAN,MAAiB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA,YAAY,SAAwB;AAChC,SAAK,UAAU;AAEf,UAAM,eAAe,IAAI,mBAAmB,QAAQ,gBAAgB,EAAE;AACtE,SAAK,qBAAqB,IAAI;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AACA,SAAK,iBAAiB,IAAI;AAAA,MACtB,IAAI,WAAW,QAAQ,WAAW,SAAS,CAAC;AAAA,MAC5C,IAAI,UAAU,QAAQ,WAAW,mBAAmB,CAAC;AAAA,IACzD;AAGA,SAAK,WAAW;AAAA,MACZ,YAAY;AACR,cAAM,KAAK,WAAW;AAAA,MAC1B;AAAA,MACA,KAAK,KAAK;AAAA,IACd;AAAA,EACJ;AAAA,EAEA,MAAM,aAAa;AACf,YAAQ,IAAI,mBAAmB;AAG/B,UAAM,YAAY,IAAI,MAAK,oBAAI,KAAK,GAAE,QAAQ,IAAI,KAAK,KAAK,GAAI;AAChE,UAAM,UAAU,oBAAI,KAAK;AAEzB,UAAM,kBACF,MAAM,KAAK,mBAAmB;AAAA,MAC1B;AAAA,MACA;AAAA,IACJ;AAEJ,UAAM,2BAA2B,gBAAgB;AAAA,MAC7C,CAAC,MAAM,EAAE,oBAAoB;AAAA,IACjC;AAGA,UAAM,aAAa,yBAAyB;AAAA,MACxC,OAAO,4BAA4B;AAC/B,cAAM,gBAAgB,IAAI;AAAA,UACtB,wBAAwB;AAAA,UACxB,KAAK;AAAA,UACL,KAAK,QAAQ;AAAA,QACjB;AACA,cAAM,YAAY,MAAM,cAAc,sBAAsB;AAC5D,cAAM,cAAc,MAAM,cAAc,iBAAiB;AACzD,eAAO,EAAE,WAAW,YAAY;AAAA,MACpC;AAAA,IACJ;AAAA,EAgBJ;AACJ;AAEO,IAAM,sBAA8B;AAAA,EACvC,OAAO,OAAO,YAA2B;AACrC,UAAM,SAAS,IAAI,WAAW,OAAO;AACrC,WAAO;AAAA,EACX;AAAA,EACA,MAAM,OAAO,YAA2B;AACpC,YAAQ,KAAK,6CAA6C;AAAA,EAC9D;AACJ;AAEA,IAAO,cAAQ;","names":[]}