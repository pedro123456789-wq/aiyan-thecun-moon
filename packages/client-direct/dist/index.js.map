{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport express, { Request as ExpressRequest } from \"express\";\nimport multer, { File } from \"multer\";\nimport { elizaLogger, generateCaption, generateImage } from \"@ai16z/eliza\";\nimport { composeContext } from \"@ai16z/eliza\";\nimport { generateMessageResponse } from \"@ai16z/eliza\";\nimport { messageCompletionFooter } from \"@ai16z/eliza\";\nimport { AgentRuntime } from \"@ai16z/eliza\";\nimport {\n    Content,\n    Memory,\n    ModelClass,\n    State,\n    Client,\n    IAgentRuntime,\n} from \"@ai16z/eliza\";\nimport { stringToUuid } from \"@ai16z/eliza\";\nimport { settings } from \"@ai16z/eliza\";\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport const messageHandlerTemplate =\n    // {{goals}}\n    `# Action Examples\n{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\n{{messageDirections}}\n\n{{recentMessages}}\n\n{{actions}}\n\n# Instructions: Write the next message for {{agentName}}.\n` + messageCompletionFooter;\n\nexport interface SimliClientConfig {\n    apiKey: string;\n    faceID: string;\n    handleSilence: boolean;\n    videoRef: any;\n    audioRef: any;\n}\nexport class DirectClient {\n    private app: express.Application;\n    private agents: Map<string, AgentRuntime>;\n\n    constructor() {\n        elizaLogger.log(\"DirectClient constructor\");\n        this.app = express();\n        this.app.use(cors());\n        this.agents = new Map();\n\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({ extended: true }));\n\n        // Define an interface that extends the Express Request interface\n        interface CustomRequest extends ExpressRequest {\n            file: File;\n        }\n\n        // Update the route handler to use CustomRequest instead of express.Request\n        this.app.post(\n            \"/:agentId/whisper\",\n            upload.single(\"file\"),\n            async (req: CustomRequest, res: express.Response) => {\n                const audioFile = req.file; // Access the uploaded file using req.file\n                const agentId = req.params.agentId;\n\n                if (!audioFile) {\n                    res.status(400).send(\"No audio file provided\");\n                    return;\n                }\n\n                let runtime = this.agents.get(agentId);\n\n                // if runtime is null, look for runtime with the same name\n                if (!runtime) {\n                    runtime = Array.from(this.agents.values()).find(\n                        (a) =>\n                            a.character.name.toLowerCase() ===\n                            agentId.toLowerCase()\n                    );\n                }\n\n                if (!runtime) {\n                    res.status(404).send(\"Agent not found\");\n                    return;\n                }\n\n                const formData = new FormData();\n                const audioBlob = new Blob([audioFile.buffer], {\n                    type: audioFile.mimetype,\n                });\n                formData.append(\"file\", audioBlob, audioFile.originalname);\n                formData.append(\"model\", \"whisper-1\");\n\n                const response = await fetch(\n                    \"https://api.openai.com/v1/audio/transcriptions\",\n                    {\n                        method: \"POST\",\n                        headers: {\n                            Authorization: `Bearer ${runtime.token}`,\n                        },\n                        body: formData,\n                    }\n                );\n\n                const data = await response.json();\n                res.json(data);\n            }\n        );\n\n        this.app.post(\n            \"/:agentId/message\",\n            async (req: express.Request, res: express.Response) => {\n                const agentId = req.params.agentId;\n                const roomId = stringToUuid(\n                    req.body.roomId ?? \"default-room-\" + agentId\n                );\n                const userId = stringToUuid(req.body.userId ?? \"user\");\n\n                let runtime = this.agents.get(agentId);\n\n                // if runtime is null, look for runtime with the same name\n                if (!runtime) {\n                    runtime = Array.from(this.agents.values()).find(\n                        (a) =>\n                            a.character.name.toLowerCase() ===\n                            agentId.toLowerCase()\n                    );\n                }\n\n                if (!runtime) {\n                    res.status(404).send(\"Agent not found\");\n                    return;\n                }\n\n                await runtime.ensureConnection(\n                    userId,\n                    roomId,\n                    req.body.userName,\n                    req.body.name,\n                    \"direct\"\n                );\n\n                const text = req.body.text;\n                const messageId = stringToUuid(Date.now().toString());\n\n                const content: Content = {\n                    text,\n                    attachments: [],\n                    source: \"direct\",\n                    inReplyTo: undefined,\n                };\n\n                const userMessage = {\n                    content,\n                    userId,\n                    roomId,\n                    agentId: runtime.agentId,\n                };\n\n                const memory: Memory = {\n                    id: messageId,\n                    agentId: runtime.agentId,\n                    userId,\n                    roomId,\n                    content,\n                    createdAt: Date.now(),\n                };\n\n                await runtime.messageManager.createMemory(memory);\n\n                const state = await runtime.composeState(userMessage, {\n                    agentName: runtime.character.name,\n                });\n\n                const context = composeContext({\n                    state,\n                    template: messageHandlerTemplate,\n                });\n\n                const response = await generateMessageResponse({\n                    runtime: runtime,\n                    context,\n                    modelClass: ModelClass.SMALL,\n                });\n\n                // save response to memory\n                const responseMessage = {\n                    ...userMessage,\n                    userId: runtime.agentId,\n                    content: response,\n                };\n\n                await runtime.messageManager.createMemory(responseMessage);\n\n                if (!response) {\n                    res.status(500).send(\n                        \"No response from generateMessageResponse\"\n                    );\n                    return;\n                }\n\n                let message = null as Content | null;\n\n                await runtime.evaluate(memory, state);\n\n                const result = await runtime.processActions(\n                    memory,\n                    [responseMessage],\n                    state,\n                    async (newMessages) => {\n                        message = newMessages;\n                        return [memory];\n                    }\n                );\n\n                if (message) {\n                    res.json([message, response]);\n                } else {\n                    res.json([response]);\n                }\n            }\n        );\n\n        this.app.post(\n            \"/:agentId/image\",\n            async (req: express.Request, res: express.Response) => {\n                const agentId = req.params.agentId;\n                const agent = this.agents.get(agentId);\n                if (!agent) {\n                    res.status(404).send(\"Agent not found\");\n                    return;\n                }\n\n                const images = await generateImage({ ...req.body }, agent);\n                const imagesRes: { image: string; caption: string }[] = [];\n                if (images.data && images.data.length > 0) {\n                    for (let i = 0; i < images.data.length; i++) {\n                        const caption = await generateCaption(\n                            { imageUrl: images.data[i] },\n                            agent\n                        );\n                        imagesRes.push({\n                            image: images.data[i],\n                            caption: caption.title,\n                        });\n                    }\n                }\n                res.json({ images: imagesRes });\n            }\n        );\n    }\n\n    public registerAgent(runtime: AgentRuntime) {\n        this.agents.set(runtime.agentId, runtime);\n    }\n\n    public unregisterAgent(runtime: AgentRuntime) {\n        this.agents.delete(runtime.agentId);\n    }\n\n    public start(port: number) {\n        this.app.listen(port, () => {\n            elizaLogger.success(`Server running at http://localhost:${port}/`);\n        });\n    }\n}\n\nexport const DirectClientInterface: Client = {\n    start: async (runtime: IAgentRuntime) => {\n        elizaLogger.log(\"DirectClientInterface start\");\n        const client = new DirectClient();\n        const serverPort = parseInt(settings.SERVER_PORT || \"3000\");\n        client.start(serverPort);\n        return client;\n    },\n    stop: async (runtime: IAgentRuntime) => {\n        elizaLogger.warn(\"Direct client does not support stopping yet\");\n    },\n};\n\nexport default DirectClientInterface;\n"],"mappings":"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","names":[]}