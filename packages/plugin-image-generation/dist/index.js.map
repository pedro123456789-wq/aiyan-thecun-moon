{"version":3,"sources":["../src/index.ts","../src/enviroment.ts"],"sourcesContent":["import { elizaLogger } from \"@ai16z/eliza\";\nimport {\n    Action,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    Plugin,\n    State,\n} from \"@ai16z/eliza\";\nimport { generateCaption, generateImage } from \"@ai16z/eliza\";\n\nimport fs from \"fs\";\nimport path from \"path\";\nimport { validateImageGenConfig } from \"./enviroment\";\n\nexport function saveBase64Image(base64Data: string, filename: string): string {\n    // Create generatedImages directory if it doesn't exist\n    const imageDir = path.join(process.cwd(), \"generatedImages\");\n    if (!fs.existsSync(imageDir)) {\n        fs.mkdirSync(imageDir, { recursive: true });\n    }\n\n    // Remove the data:image/png;base64 prefix if it exists\n    const base64Image = base64Data.replace(/^data:image\\/\\w+;base64,/, \"\");\n\n    // Create a buffer from the base64 string\n    const imageBuffer = Buffer.from(base64Image, \"base64\");\n\n    // Create full file path\n    const filepath = path.join(imageDir, `${filename}.png`);\n\n    // Save the file\n    fs.writeFileSync(filepath, imageBuffer);\n\n    return filepath;\n}\n\nexport async function saveHeuristImage(\n    imageUrl: string,\n    filename: string\n): Promise<string> {\n    const imageDir = path.join(process.cwd(), \"generatedImages\");\n    if (!fs.existsSync(imageDir)) {\n        fs.mkdirSync(imageDir, { recursive: true });\n    }\n\n    // Fetch image from URL\n    const response = await fetch(imageUrl);\n    if (!response.ok) {\n        throw new Error(`Failed to fetch image: ${response.statusText}`);\n    }\n\n    const arrayBuffer = await response.arrayBuffer();\n    const imageBuffer = Buffer.from(arrayBuffer);\n\n    // Create full file path\n    const filepath = path.join(imageDir, `${filename}.png`);\n\n    // Save the file\n    fs.writeFileSync(filepath, imageBuffer);\n\n    return filepath;\n}\n\nconst imageGeneration: Action = {\n    name: \"GENERATE_IMAGE\",\n    similes: [\n        \"IMAGE_GENERATION\",\n        \"IMAGE_GEN\",\n        \"CREATE_IMAGE\",\n        \"MAKE_PICTURE\",\n        \"GENERATE_IMAGE\",\n        \"GENERATE_A\",\n        \"DRAW\",\n        \"DRAW_A\",\n        \"MAKE_A\",\n    ],\n    description: \"Generate an image to go along with the message.\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        await validateImageGenConfig(runtime);\n\n        const anthropicApiKeyOk = !!runtime.getSetting(\"ANTHROPIC_API_KEY\");\n        const togetherApiKeyOk = !!runtime.getSetting(\"TOGETHER_API_KEY\");\n        const heuristApiKeyOk = !!runtime.getSetting(\"HEURIST_API_KEY\");\n\n        // TODO: Add openai DALL-E generation as well\n\n        return anthropicApiKeyOk || togetherApiKeyOk || heuristApiKeyOk;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Composing state for message:\", message);\n        state = (await runtime.composeState(message)) as State;\n        const userId = runtime.agentId;\n        elizaLogger.log(\"User ID:\", userId);\n\n        const imagePrompt = message.content.text;\n        elizaLogger.log(\"Image prompt received:\", imagePrompt);\n\n        // TODO: Generate a prompt for the image\n\n        const res: { image: string; caption: string }[] = [];\n\n        elizaLogger.log(\"Generating image with prompt:\", imagePrompt);\n        const images = await generateImage(\n            {\n                prompt: imagePrompt,\n                width: 1024,\n                height: 1024,\n                count: 1,\n            },\n            runtime\n        );\n\n        if (images.success && images.data && images.data.length > 0) {\n            elizaLogger.log(\n                \"Image generation successful, number of images:\",\n                images.data.length\n            );\n            for (let i = 0; i < images.data.length; i++) {\n                const image = images.data[i];\n\n                // Save the image and get filepath\n                const filename = `generated_${Date.now()}_${i}`;\n\n                // Choose save function based on image data format\n                const filepath = image.startsWith(\"http\")\n                    ? await saveHeuristImage(image, filename)\n                    : saveBase64Image(image, filename);\n\n                elizaLogger.log(`Processing image ${i + 1}:`, filename);\n\n                //just dont even add a caption or a description just have it generate & send\n                /*\n                try {\n                    const imageService = runtime.getService(ServiceType.IMAGE_DESCRIPTION);\n                    if (imageService && typeof imageService.describeImage === 'function') {\n                        const caption = await imageService.describeImage({ imageUrl: filepath });\n                        captionText = caption.description;\n                        captionTitle = caption.title;\n                    }\n                } catch (error) {\n                    elizaLogger.error(\"Caption generation failed, using default caption:\", error);\n                }*/\n\n                const caption = \"...\";\n                /*= await generateCaption(\n                    {\n                        imageUrl: image,\n                    },\n                    runtime\n                );*/\n\n                res.push({ image: filepath, caption: \"...\" }); //caption.title });\n\n                elizaLogger.log(\n                    `Generated caption for image ${i + 1}:`,\n                    \"...\" //caption.title\n                );\n                //res.push({ image: image, caption: caption.title });\n\n                callback(\n                    {\n                        text: \"...\", //caption.description,\n                        attachments: [\n                            {\n                                id: crypto.randomUUID(),\n                                url: filepath,\n                                title: \"Generated image\",\n                                source: \"imageGeneration\",\n                                description: \"...\", //caption.title,\n                                text: \"...\", //caption.description,\n                            },\n                        ],\n                    },\n                    [\n                        {\n                            attachment: filepath,\n                            name: `${filename}.png`,\n                        },\n                    ]\n                );\n            }\n        } else {\n            elizaLogger.error(\"Image generation failed or returned no data.\");\n        }\n    },\n    examples: [\n        // TODO: We want to generate images in more abstract ways, not just when asked to generate an image\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Generate an image of a cat\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here's an image of a cat\",\n                    action: \"GENERATE_IMAGE\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Generate an image of a dog\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here's an image of a dog\",\n                    action: \"GENERATE_IMAGE\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Create an image of a cat with a hat\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here's an image of a cat with a hat\",\n                    action: \"GENERATE_IMAGE\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Make an image of a dog with a hat\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here's an image of a dog with a hat\",\n                    action: \"GENERATE_IMAGE\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"Paint an image of a cat with a hat\" },\n            },\n            {\n                user: \"{{agentName}}\",\n                content: {\n                    text: \"Here's an image of a cat with a hat\",\n                    action: \"GENERATE_IMAGE\",\n                },\n            },\n        ],\n    ],\n} as Action;\n\nexport const imageGenerationPlugin: Plugin = {\n    name: \"imageGeneration\",\n    description: \"Generate images\",\n    actions: [imageGeneration],\n    evaluators: [],\n    providers: [],\n};\n","import { IAgentRuntime } from \"@ai16z/eliza\";\nimport { z } from \"zod\";\n\nexport const imageGenEnvSchema = z\n    .object({\n        ANTHROPIC_API_KEY: z.string().optional(),\n        TOGETHER_API_KEY: z.string().optional(),\n        HEURIST_API_KEY: z.string().optional(),\n    })\n    .refine(\n        (data) => {\n            return !!(\n                data.ANTHROPIC_API_KEY ||\n                data.TOGETHER_API_KEY ||\n                data.HEURIST_API_KEY\n            );\n        },\n        {\n            message:\n                \"At least one of ANTHROPIC_API_KEY, TOGETHER_API_KEY, or HEURIST_API_KEY is required\",\n        }\n    );\n\nexport type ImageGenConfig = z.infer<typeof imageGenEnvSchema>;\n\nexport async function validateImageGenConfig(\n    runtime: IAgentRuntime\n): Promise<ImageGenConfig> {\n    try {\n        const config = {\n            ANTHROPIC_API_KEY:\n                runtime.getSetting(\"ANTHROPIC_API_KEY\") ||\n                process.env.ANTHROPIC_API_KEY,\n            TOGETHER_API_KEY:\n                runtime.getSetting(\"TOGETHER_API_KEY\") ||\n                process.env.TOGETHER_API_KEY,\n            HEURIST_API_KEY:\n                runtime.getSetting(\"HEURIST_API_KEY\") ||\n                process.env.HEURIST_API_KEY,\n        };\n\n        return imageGenEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Image generation configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n"],"mappings":"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","names":[]}